from loader import bot
from keyboards.reply.advanced_keyboard import quiz_or_play_keyboard, lucky_keyboard, distributed_answer
from keyboards.reply.defoult_keboard import button_for_back, buttons_for_help
from states.user_state_survey import EventState
from telebot.types import Message
from database.information_users_DB import DataUsers
from handlers.advanced_heandlers.quiz_and_play.generator_issues import get_question_and_responses_and_right,\
    count_right_response
from states.user_state_survey import back
import random


@bot.message_handler(commands=['event'])
def event(message: Message) -> None:
    '''
    —Ç—Ä–µ–±—É–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞
    :return:
    '''

    bot.set_state(message.from_user.id, EventState.path, message.chat.id)
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=quiz_or_play_keyboard(message.from_user.id))


@bot.message_handler(state=EventState.path, content_types=['text'])
def path(message: Message) -> None:
    '''
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∫–æ–º–∞–Ω–¥

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞
    :return:
    '''
    if back(message):
        if message.text == '–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∏ –æ—á–∫–∏ OpenWeatherüòÄ':
            bot.set_state(message.from_user.id, EventState.digit_bot_medium, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data_user:
                data_user['digit'] = random.randint(1, 10)

            bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∫–æ–º–∞–Ω–¥–∞–º, –æ—Ç–≥–∞–¥–∞–π—Ç–µ –º–æ–µ —á–∏—Å–ª–æ.'
                                                   ' –û–Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 1 –¥–æ 10 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.', reply_markup=button_for_back())

        elif message.text == '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤–µ—Å–µ–ª–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!':
            USER = DataUsers()
            if USER.exist_user(message.from_user.id):
                text, variants, answer = get_question_and_responses_and_right(0)
                bot.set_state(message.from_user.id, EventState.issue1, message.chat.id)
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data_user:
                    data_user['right1'] = answer
                bot.send_message(message.from_user.id, f'–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n\n{text}\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n\n{variants}',
                                 reply_markup=distributed_answer())
            else:
                bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!',
                                 reply_markup=quiz_or_play_keyboard(message.from_user.id))


        elif message.text == '–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –≥–æ—Ä—É –æ—á–∫–æ–≤ OpenWeather!':
            USER = DataUsers()
            if USER.exist_user(message.from_user.id):
                bot.set_state(message.from_user.id, EventState.choice_complexity, message.chat.id)
                bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã.', reply_markup=lucky_keyboard())
            else:
                bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!',
                                 reply_markup=quiz_or_play_keyboard(message.from_user.id))


        else:
            bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É',
                             reply_markup=quiz_or_play_keyboard(message.from_user.id))


@bot.message_handler(state=EventState.choice_complexity, content_types=['text'])
def get_complexity(message: Message) -> None:
    '''
    –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞
    :return:
    '''
    if back(message):
        if message.text == '–ù–æ—Ä–º–∞–ª—å–Ω–æ (100 –æ—á–∫–æ–≤)üòÑ':
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data_user:
                data_user['digit'] = random.randint(1, 10)

            bot.set_state(message.from_user.id, EventState.digit_bot_medium, message.chat.id)
            bot.send_message(message.from_user.id, '–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π –µ–≥–æ –æ—Ç–≥–∞–¥–∞—Ç—å!',
                             reply_markup=button_for_back())

        elif message.text == '–°–ª–æ–∂–Ω–æ (10 000 –æ—á–∫–æ–≤)üòÆ':
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data_user:
                data_user['digit'] = random.randint(1, 100)

            bot.set_state(message.from_user.id, EventState.digit_bot_hard, message.chat.id)
            bot.send_message(message.from_user.id, '–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π –µ–≥–æ –æ—Ç–≥–∞–¥–∞—Ç—å!',
                             reply_markup=button_for_back())

        elif message.text == '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ (1 000 000 –æ—á–∫–æ–≤)üò¢':
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data_user:
                data_user['digit'] = random.randint(1, 1000)

            bot.set_state(message.from_user.id, EventState.digit_bot_impossible, message.chat.id)
            bot.send_message(message.from_user.id, '–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000. –ü–æ–ø—Ä–æ–±—É–π –µ–≥–æ –æ—Ç–≥–∞–¥–∞—Ç—å!',
                             reply_markup=button_for_back())

        else:
            bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.', reply_markup=lucky_keyboard())


@bot.message_handler(state=EventState.digit_bot_hard)
def get_score_hard(message: Message) -> None:
    '''
    –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—á–∫–∏ —é–∑–µ—Ä—É

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞
    :return:
    '''
    if back(message):
        if message.text.isdigit():
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data_user:
                great_result = data_user.get('digit')
            if great_result == int(message.text):
                USER = DataUsers()
                USER.update_score(message.from_user.id, 10_000)
                bot.delete_state(message.from_user.id, message.chat.id)
                bot.send_message(message.from_user.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 10 000 –æ—á–∫–æ–≤ OpenWeather! –ë—É–¥—É –∂–¥–∞—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!',
                                 reply_markup=buttons_for_help())

            else:
                bot.delete_state(message.from_user.id, message.chat.id)
                bot.send_message(message.from_user.id, f'–ù–ï–£–î–ê–ß–ê! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ - {great_result}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!', reply_markup=buttons_for_help())
        else:
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.', reply_markup=button_for_back())


@bot.message_handler(state=EventState.digit_bot_medium, content_types=['text'])
def get_score_and_access_medium(message: Message) -> None:
    '''
    –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–º—É –æ—á–∫–∏

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞
    :return:
    '''
    if back(message):
        if message.text.isdigit():
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data_user:
                great_result = data_user.get('digit')
            if great_result == int(message.text):
                USER = DataUsers()
                if not USER.exist_user(message.from_user.id):
                    data = {'name': 'WINNER!', 'surname': 'WINNER!', 'age': 0, 'country': 'WINNER!',
                            'town': 'WINNER', 'phone': 'WINNER!'}
                    USER.add_info(message.from_user.id, data_user=data)
                    bot.send_message(message.from_user.id,
                                     '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞!',)
                USER.update_score(message.from_user.id, 100)
                bot.delete_state(message.from_user.id, message.chat.id)
                bot.send_message(message.from_user.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 100 –æ—á–∫–æ–≤ OpenWeather! –ë—É–¥—É –∂–¥–∞—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!',
                                 reply_markup=buttons_for_help())

            else:
                bot.delete_state(message.from_user.id, message.chat.id)
                bot.send_message(message.from_user.id, f'–ù–ï–£–î–ê–ß–ê! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ - {great_result}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!',
                                 reply_markup=buttons_for_help())
        else:
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.', reply_markup=button_for_back())


@bot.message_handler(state=EventState.digit_bot_impossible, content_types=['text'])
def get_score_impossible(message: Message) -> None:
    '''
    –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—á–∫–∏ —é–∑–µ—Ä—É

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞
    :return:
    '''
    if back(message):
        if message.text.isdigit():
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data_user:
                great_result = data_user.get('digit')

            if great_result == int(message.text):
                USER = DataUsers()
                USER.update_score(message.from_user.id, 1_000_000)
                bot.delete_state(message.from_user.id, message.chat.id)
                bot.send_message(message.from_user.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ!'
                                                       '\n–î–æ–±–∞–≤–ª–µ–Ω–æ –æ—á–∫–æ–≤ OpenWeather: 1 000 000!\n–ë—É–¥—É –∂–¥–∞—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!',
                                 reply_markup=buttons_for_help())
            else:
                bot.delete_state(message.from_user.id, message.chat.id)
                bot.send_message(message.from_user.id, f'–ù–ï–£–î–ê–ß–ê! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ - {great_result}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!',
                                 reply_markup=buttons_for_help())
        else:
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.', reply_markup=button_for_back())


@bot.message_handler(state=EventState.issue1, content_types=['text'])
def get_answer_1(message: Message) -> None:
    '''
    –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —é–∑–µ—Ä–∞ –∏ –∑–∞–¥–∞–µ—Ç –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return:
    '''
    if back(message):
        if message.text in ("–ê", "–ë", "–í"):
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data_user:
                data_user['response1'] = message.text == data_user.get('right1')


            text, variants, answer = get_question_and_responses_and_right(1)
            bot.set_state(message.from_user.id, EventState.issue2, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data_user:
                data_user['right2'] = answer
            bot.send_message(message.from_user.id, f'–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å:\n\n{text}\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n\n{variants}',
                             reply_markup=distributed_answer())
        else:
            bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=distributed_answer())


@bot.message_handler(state=EventState.issue2, content_types=['text'])
def get_answer_2(message: Message) -> None:
    '''
    –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —é–∑–µ—Ä–∞ –∏ –∑–∞–¥–∞–µ—Ç —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞
    :return:
    '''
    if back(message):
        if message.text in ("–ê", "–ë", "–í"):
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data_user:
                data_user['response2'] = message.text == data_user.get('right2')


            text, variants, answer = get_question_and_responses_and_right(2)
            bot.set_state(message.from_user.id, EventState.issue3, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data_user:
                data_user['right3'] = answer
            bot.send_message(message.from_user.id, f'–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å:\n\n{text}\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n\n{variants}',
                             reply_markup=distributed_answer())
        else:
            bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=distributed_answer())


@bot.message_handler(state=EventState.issue3, content_types=['text'])
def get_answer_3_and_count_answer(message: Message) -> None:
    '''
    –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —é–∑–µ—Ä–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–∞—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—á–∫–∏ —é–∑–µ—Ä—É

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞
    :return:
    '''
    if back(message):
        if message.text in ("–ê", "–ë", "–í"):
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data_user:
                data_user['response3'] = message.text == data_user.get('right3')
                answer, count = count_right_response(data=data_user)

            USER = DataUsers()
            USER.update_score(message.from_user.id, count)
            bot.send_message(message.from_user.id, answer, reply_markup=buttons_for_help())

        else:
            bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=distributed_answer())





























