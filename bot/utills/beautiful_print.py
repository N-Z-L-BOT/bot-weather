import locale
from datetime import datetime
locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')


def emoticon_description(state: str) -> str:
    '''

    :param state: –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –æ—Ç OpenWeather
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–∞–π–ª–∏–∫ (–æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã)
    '''
    supplementary_data = ('Mist', 'Smoke', 'Haze', 'Dust', 'Fog', 'Sand', 'Dust', 'Ash', 'Squall', 'Tornado')

    exist_weather = {
        'Clear': "\U00002600",
        'Thunderstorm': '\U0001F329',
        'Drizzle': '\U0001F326',
        'Rain': '\U0001F327',
        'Snow': '\U00002744',
        'Clouds': '\U00002601'
    }
    result = exist_weather.get(state.capitalize())
    if result:
        return result

    elif result is None and state in supplementary_data:
        return '\U0001F32A'

    return '\U0001F300'


def get_beautiful_date_and_time(day_and_time=None) -> tuple[str, str]:
    '''

    :param day_and_time: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –∏–ª–∏ None
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    '''
    if day_and_time is None:
        date = datetime.now()
        date_answer = date.strftime('%A %d, %B %Y')
        time_answer = date.strftime('%H:%M:%S')

    else:
        full_date = datetime.strptime(day_and_time, '%Y-%m-%d %H:%M:%S')
        date_answer = full_date.strftime('%A %d, %B %Y')
        time_answer = full_date.strftime('%H:%M:%S')

    return date_answer, time_answer


def clear_excess_sym(data: list[str]) -> tuple[str]:
    '''

    :param data: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –≥–æ—Ä–æ–¥–∞–º–∏
    :return: —á–∏—Å—Ç–∏—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞ split
    '''
    if '' in data:
        return tuple(town for town in data if town != '')
    return tuple(data)


def generate_answer(condition: bool, params: str) -> str:
    '''

    :param condition: –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    :param params: –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å
    :return: –≤–æ–∑–≤—Ä–∞—â–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    '''
    if condition and params == 'temp':
        return '–ü–∞—Ä–∞–º–µ—Ç—Ä: —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞\n\n'
    elif condition is False and params == 'temp':
        return '–ü–∞—Ä–∞–º–µ—Ç—Ä: —Å–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞\n\n'
    elif condition and params == 'duration':
        return '–ü–∞—Ä–∞–º–µ—Ç—Ä: —Å–∞–º–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è\n\n'
    elif condition is False and params == 'duration':
        return '–ü–∞—Ä–∞–º–µ—Ç—Ä: —Å–∞–º–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è\n\n'


def result(full_data: list, params: str) -> str:
    '''

    :param full_data: —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏–π –ø–æ–≥–æ–¥—ã
    :param params: –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    '''
    answer = str()
    if full_data and params == 'temp':
        count = 1
        for town, state, like in full_data:
            answer += f'{count}) {town}: {state}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è, –∫–∞–∫ {like}¬∞C)\n'
            count += 1

    elif full_data and params == 'duration':
        count = 1
        for town, during in full_data:
            answer += f'{count}) {town}: {during}\n'
            count += 1
    return answer


def mistake(mistake_query: list, date: str, time: str):
    '''

    :param mistake_query: —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏
    :param date: –¥–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    :param time: –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    '''
    answer = str()
    if mistake_query:
        answer += '\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º:\n'
        for miss in mistake_query:
            answer += f'- {miss}\n'

    answer += f'\n–î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {date} {time}'
    return answer


def descriptions(info: list[dict]) -> str:
    '''

    :param info: –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç OpenWeather
    :return: –≤–æ–∑–≤—Ä–∞—â–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–º–∞–π–ª–∏–∫ –∫ —ç—Ç–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
    '''
    return info[0].get('description') + emoticon_description(info[0].get('main'))


def get_data_about_weather(data: dict, name_town: str, date_predict: str, time_predict: str, sunrise: datetime,
                           sunset: datetime, date_answer: str, time_answer: str) -> str:
    '''

    :param data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    :param name_town: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    :param date_predict: –¥–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    :param time_predict: –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    :param sunrise: –≤—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞
    :param sunset: –≤—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞
    :param date_answer: –¥–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    :param time_answer: –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–≥–æ–¥—ã
    '''

    error_data = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    description = descriptions(data.get('weather', error_data))
    current_temp = data.get('main').get('temp', error_data)
    feels_temp = data.get('main').get('feels_like', error_data)
    pressure = data.get('main').get('pressure', error_data)
    humidity = data.get('main').get('humidity', error_data)
    speed_winter = data.get('wind').get('speed', error_data)
    level_sea = data.get('main').get('sea_level', error_data)
    duration_day = sunset - sunrise

    answer = f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date_predict} {time_predict}:\n\n" \
             f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: {name_town}\n" \
             f"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {description}\n" \
             f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current_temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è, –∫–∞–∫ {feels_temp}¬∞C)\n" \
             f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º —Ä—Ç. —Å—Ç.\n" \
             f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} –≥/–º^3\n" \
             f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {speed_winter} –º/—Åüí®\n" \
             f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise}üåû\n" \
             f"–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset}\U0001F311\n" \
             f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {duration_day}\n" \
             f"–£—Ä–æ–≤–µ–Ω—å –º–æ—Ä—è: {level_sea}üåä\n\n" \
             f"–î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {date_answer}. –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {time_answer}"

    return answer


def error_load(date_predict: str, time_predict: str, date_answer: str, time_answer: str, city: str) -> str:
    '''

    :param date_predict: –¥–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    :param time_predict: –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    :param date_answer: –¥–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    :param time_answer: –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    :param city: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É
    '''
    return f'–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date_predict} {time_predict}:\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ {city}.\n' \
           f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.\n–î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {date_answer} {time_answer}.'


def statistic(data_scores: list, user_score: int) -> int:
    '''

    :param data_scores: —Å–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –æ—á–∫–∞–º–∏ OpenWeather –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤
    :param user_score: –æ—á–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–∑–µ—Ä–∞
    :return: –≤–æ–∑–≤—Ä–∞—â–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–≥–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–µ, —á–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —é–∑–µ—Ä–æ–≤
    '''
    if user_score == (0,):
        return 0

    len_data_scores = len(data_scores) - 1
    if len_data_scores == 0:
        return 100

    return int((sorted(data_scores).index((user_score,))) / len_data_scores * 100)












